Input原理：https://juejin.cn/post/6956500920108580878#heading-1

system_server在启动时会启动InputManagerService，InputManagerService会创建InputReader、InputDispatcher对象。
并且开启这两个对象的native轮询线程。

InputReader：负责获取驱动中的触摸事件、传给InputDispatcher。
	它利用inotify和epoll机制监听/dev/input目录下的input设备事件节点，通过EventHub的getEvents接口获取到事件。

InputDispatcher：负责寻找目标窗口、发送事件给目标窗口
	1、寻找目标窗口
	系统屏幕上同一时间会存在多个可见窗口，如状态栏、导航栏、应用窗口、应用界面Dialog弹框窗口等。
	查看命令：adb shell dumpsys SurfaceFlinger
	寻找函数：InputDispatcher::findTouchedWindowTargetsLocked
	寻找逻辑：根据读取到的事件所属的屏幕displayid、x、y坐标位置等属性，遍历从mWindowHandlesByDisplay中匹配找到目标窗口
	mWindowHandlesByDisplay集合：InputDispatcher#setInputWindows 赋值而来的（SurfaceFlinger会在每一帧合成任务SurfaceFlinger::OnMessageInvalidate中搜集每个可见窗口Layer的信息通过，Binder调用InputDispatcher::setInputWindows同步可见窗口信息给InputDispatcher（android11之前是由WindowManagerService传给InputDispatcher的））

	2、发送事件给目标窗口
	2.1 双方通过什么方式通讯？
	InputDispatcher使用InputChannel封装的Socket（InputChannel内携带这socket fd）发送事件给目标应用窗口所属的应用进程。

	2.2 应用进程是怎么获得socket fd的？（InputDispatcher的InputChannel注册与监听）
	当应用界面启动的时候（ViewRootImpl#setView）添加窗口到WMS的过程中，会new一个空的InputChanel并且传给WMS（addToDisplayAsUser），让WMS为其赋值。
	在WMS addToDisplayAsUser的过程中，会创建一对InputChanel，client端赋值给那个空的InputChanel丢回给应用进程，service端的注册到InputDispatcher（InputDispatcher会缓存到一个map中，key为窗口token，value为InputChanel）。

	自此双方各持有了fd，各种会将fd加入到自己的looper里边进行监听（通过epoll进行监听）

	2.3 InputDispatcher发送事件
	寻找目标窗口，判断窗口是否就绪，如果已就绪
	通过窗口token获取到对应窗口的InputChanel。通过InputChanel内的socket fd写入事件

	2.4 应用进程接收事件
	应用进程的主线程的looper进行监听，且监听事件为ALOOPER_EVENT_INPUT，并在接收到事件之后会触发回调NativeInputEventReceiver::handleEvent函数，然后反调用java层方法。
	ViewRootImpl::WindowInputDispatcherReceiver::onInputEvent -> ViewRootImpl#enqueueInputEvent -> ViewPostImeInputState#deliver -> DecorView ... 责任链 ...（消费事件）-> ViewPostImeInputState#finishInputEvent（最终通过自己的InputChannel通知 InputDispatcher 事件已经处理完成）



ViewRootImpl 事件分发的过程
setView -> new WindowInputEventReceiver -> new InputEventReceiver -> new NativeInputEventReceiver

有事件来的时候JNI调用到 WindowInputEventReceiver#dispatchInputEvent
WindowInputEventReceiver并没有实现这个方法，因此会调用父类InputEventReceiver#dispatchInputEvent
内部会真正调用到 WindowInputEventReceiver#onInputEvent

-> doProcessInputEvents -> deliverInputEvent -> InputStage#deliver（这里的InputStage是 ViewPostImeInputStage ）-> apply(q, onProcess(q)) （先执行onProcess，再执行apply）-> ViewPostImeInputStage#onProcess -> ViewPostImeInputStage#processPointerEvent执行DecorView#dispatchPointerEvent）

ViewPostImeInputStage#processPointerEvent分析：
		private int processPointerEvent(QueuedInputEvent q) {
            final MotionEvent event = (MotionEvent)q.mEvent;
            ...
            boolean handled = mView.dispatchPointerEvent(event);
            ...
            return handled ? FINISH_HANDLED : FORWARD;
        }

ViewRootImpl 处理完事件后，通知InputDispatcher
apply(q, onProcess(q) 不管返回什么result，最终都是走到finishInputEvent) -> ViewPostImeInputStage#apply（InputStage#apply）-> InputStage#finish -> ... -> InputStage#onDeliverToNext -> InputStage#finishInputEvent -> QueuedInputEvent#InputEventReceiverfinishInputEvent -> ... 通知InputDispatcher

	
	
Input查看命令：adb shell dumpsys input
只关注 Input Dispatcher State:
  FocusedApplications: //获取焦点的进程
    displayId=0, name='AppWindowToken{a781bdd token=Token{82383b4 ActivityRecord{174d887 u0 aaa.llk.trace/com.llk.trace.MainActivity t868}}}', dispatchingTimeout=5000.000ms
  FocusedWindows: //获取焦点的窗口
    displayId=0, name='Window{d711981 u0 aaa.llk.trace/com.llk.trace.MainActivity}'
  PendingEvent:  //PendingEvent
    MotionEvent, age=2971.4ms
  InboundQueue: length=23 //从InputReader获取到的事件
    MotionEvent, age=2907.3ms
    MotionEvent, age=2654.5ms
    ...
  Connections: //已注册的InputChannel
    0: ...
    1: ...
    ...
  	12: channelName='d711981 aaa.llk.trace/com.llk.trace.MainActivity (server)', windowName='d711981 aaa.llk.trace/com.llk.trace.MainActivity (server)', status=NORMAL, monitor=false, inputPublisherBlocked=false
      OutboundQueue: <empty> //等待发送的应用的事件
      WaitQueue: length=20   //已发送给应用的事件
        MotionEvent, targetFlags=0x00000105, resolvedAction=0, age=3478.7ms, wait=3476.1ms
        MotionEvent, targetFlags=0x00000105, resolvedAction=2, age=3475.3ms, wait=3474.2ms
        ...



Input ANR分析：https://zhuanlan.zhihu.com/p/53331495?from_voters_page=true

InputDispatcher涉及到3个队列 以及 一个变量：
		InboundQueue：存放从InputReader发送过来的事件
		OutboundQueue：存放即将发送给目标app的事件
		WaitQueue：已经发送给app的事件，等待app处理完成通知移除事件
		PendingEvent变量：从InboundQueue队头拿到事件赋值给自己，如果窗口就绪会将事件丢到OutboundQueue。

InputDispatcher轮询逻辑：
1、获取要处理的事件
如果PendingEvent为空
	从InboundQueue队头取出事件，赋值给PendingEvent
如果PendingEvent不为空
	继续拿PendingEvent手上的事件执行

2、检查窗口是否就绪
checkWindowReadyForMoreInputLocked：!connection->waitQueue.isEmpty() && currentTime >= connection->waitQueue.head->deliveryTime + STREAM_AHEAD_EVENT_TIMEOUT
检查窗口就绪逻辑：(WaitQueue不为空 && 当前时间 >= waitQueue队头事件时间 + 500ms) ---> 未就绪（证明目标进程有段事件没回应了）

如果窗口就绪
	将PendingEvent的事件加入到OutboundQueue
	发送给目标窗口对应的应用进程，并且将事件加入WaitQueue。
	进入下一次轮询
如果窗口未就绪
	当前事件是否是Pending（是不是上一轮还处理掉，还留在PendingEvent里的事件）
	如果不是，设置pending超时时长（当前时间+5s）
	如果是，判断其pending超时时长，看看是否已经超时（当前时间>pending超时时长，就是超时）
		如果超时：触发anr
		如果未超时：进入下一次轮询
	进入下一次轮询

3、当应用进程处理完事件，会通知InputDispatcher，从WaitQueue移除对应的事件


实验分析：

实验1 dispatchTouchEvent sleep10000s
非点击事件：在执行完dispatchTouchEvent后，才会通知WaitQueue移除。

第一次点击：事件发送成功，进入WaitQueue，等待app回应。（app阻塞了不会有回应的，但是如果等到5s后也是不会发生anr的，因为InputDispatcher没有新事件进来，没有继续工作了）
第二次点击：PendingEvent拿到down事件， InboundQueue留下up事件。但是发现目标进程并未就绪，给自己设置5s超时之后继续进入轮询。直到轮询5s后，发现不对劲就抛出anr


实验2 dispatchTouchEvent sleep10000s

点击事件触发anr（onClick里边sleep），第三次点击5s后才会触发anr？？？
点击事件：它是在dispatchTouchEvent执行完成后才丢到主线程执行的。也就是当进入onClick时，第一次点击的down/up事件已经执行完成，并从WaitQueue移除了。

第一次点击：移除WaitQueue成功（但其实app已经进入阻塞了）
第二次点击：事件发送成功，进入WaitQueue，等待app回应。（app阻塞了不会有回应的，但是如果等到5s后也是不会发生anr的，因为InputDispatcher没有新事件进来，没有继续工作了）
第三次点击：取出事件到PendingEvent，但是发现目标进程并未就绪，给自己设置5s超时之后继续进入轮询。直到轮询5s后，发现不对劲就抛出anr

实验...参考文章

总结：
dispatchTouchEvent, onTouchEvent等处于非点击事件的调用链中，执行耗时操作即使未达到5s，也可能因为事件累计导致ANR。
导致ANR的条件是在有PendingEvent时，WaitQueue中累积事件的总处理时长大于5s。
如果是点击事件中，执行耗时操作一定是大于5s（且有PendingEvent）才会触发ANR。
