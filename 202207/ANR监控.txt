ANR监控
1、常规手段WatchDog

2、SIGQUIT信号

ANR的过程：
当应用发生ANR之后，AMS会收集许多相关进程的pid，用来dump堆栈从而生成ANR trace文件。
（为了保证系统可用，dump堆栈的时间不能超过20s，超过主动放弃dump）。收集的第一个进程，也是一定会被收集到的进程，就是发生ANR的进程。

接着系统开始向这些应用进程发送SIGQUIT信号，应用进程收到SIGQUIT信号后开始dump堆栈生成trace文件（这个dump过程是发生在应用进程的）。
每一个应用进程都会有一个SignalCatcher线程，专门处理SIGQUIT信号。（WaitForSignal方法调用了sigwait方法，这是一个阻塞方法。这里的死循环，就会一直不断的等待监听SIGQUIT和SIGUSR1这两个信号的到来。）

然后再回到AMS完成剩余的ANR流程。

接收SIGQUIT信号：
1、sigwait（该方案不可靠）
由于Signal Catcher线程在sigwait，我们再写一个线程sigwait。由于两个线程通过sigwait方法监听同一个信号时，具体哪一个线程收到信号时不能确定的。


2、Signal Handler
同时有sigwait和signal handler的情况下，信号没有走signal handler而是依然被系统的Signal Catcher线程捕获到了。

原因是Android默认把SIGQUIT设置成了BLOCKED，通过pthread_sigmask或者sigprocmask把SIGQUIT设置为UNBLOCK，那么再次收到SIGQUIT时，就一定会进入到我们的handler方法中。

需要注意，通过Signal Handler抢到了SIGQUIT后，原本的Signal Catcher线程中的sigwait就不再能收到SIGQUIT了，原本的dump堆栈的逻辑就无法完成了，为了ANR的整个逻辑和流程跟原来完全一致，需要在Signal Handler里面重新向Signal Catcher线程发送一个SIGQUIT。（如果缺少了重新向SignalCatcher发送SIGQUIT的步骤，AMS就一直等不到ANR进程写堆栈，直到20秒超时后，才会被迫中断，而继续之后的流程。直接的表现就是ANR弹窗非常慢（20秒超时时间），并且/data/anr目录下无法正常生成完整的 ANR Trace文件。）


3、完善Signal Handler

收到SIGQUIT信号不一定是发生了ANR?
收到SIGQUIT信号并不一定是发生了anr，因为有可能是其他程序或系统发出的用作其他用途的（发送信号方法：java层调用android.os.Process.sendSignal方法；Native层调用kill或者tgkill方法）。


解决方法1：检查NOT_RESPONDING的flag。
在ANR弹窗前会执行到makeAppNotRespondingLocked方法中，会给发生ANR进程标记一个NOT_RESPONDING的flag。而这个flag可以通过ActivityManager来获取：ActivityManager#getProcessesInErrorState，判断下是否为ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING。监控到SIGQUIT后，在20秒内不断轮询自己是否有NOT_RESPONDING，一旦发现有这个flag那么马上就可以认定发生了一次ANR。

漏报情况：发生ANR了但是进程查不到NOT_RESPONDING的情况
后台ANR：ANR被标记为了后台ANR（即SilentAnr），那么杀死进程后就会直接return，并不会走到产生进程错误状态的逻辑。后台ANR没办法捕捉到，而后台ANR的量同样非常大，并且后台ANR会直接杀死进程。
前台ANR：部分厂商系统定制化，前台的ANR也并不会弹窗而是直接杀死进程。


解决方法2：检查主线程消息队列，头消息的入队时间（减去当前时间，得到是等待时间，如果等待时间过长就说明主线程是处于卡住的状态）。

最好是这两个方法结合！！！



4、trace信息的捕获
截获SIGQUIT信号之后，会再次发送SIGQUIT信号出去。因为需要唤醒Signal Catcher线程的sigwait，让该线程工作起来。
会执行写trace文件的操作，它会先connet方法链接一个path为“/dev/socket/tombstoned_java_trace”的socket，然后执行write，生成trace。

我们需要hook connet，判断path是否为“/dev/socket/tombstoned_java_trace”
然后再对Signal Catcher线程的第一次write，write的内容就是我们所需要的。

hook是用爱奇艺的xHook（PLT hook）

5、总结
这个方案不仅仅可以用来查ANR问题，任何时候我们都可以手动向自己发送一个SIGQUIT信号，从而hook到当时的Trace。Trace的内容对于我们排查线程死锁，线程异常，耗电等问题都非常有帮助。


matrix相关代码（所有逻辑在 模块：matrix-trace-canary）

SignalHandler.cc#signalHandler（实现signalHandler，一直轮询信号）
-> AndrDumper.cc#handleSignal（判断信号是否为SIGQUIT）
-> AndrDumper.cc#siUserCallback（hook connet/write（hookAnrTraceWrite），再次发送SIGQUIT信号（sendSigToSignalCatcher））

等到Signal Catcher线程执行 connet /dev/socket/tombstoned_java_trace
-> MatrixTracer.cc#my_connect（判断是否为 /dev/socket/tombstoned_java_trace）
等到Signal Catcher线程执行 write
-> MatrixTracer.cc#my_write（执行写入（writeAnr），执行回调上层（printTraceCallback））
-> MatrixTracer.cc#writeAnr（执行un hook，将内容写入到文件）

java层 主要是 SignalAnrTracer
SignalAnrTracer#isMainThreadBlocked 检查主线程是否处于卡住的状态
SignalAnrTracer#checkErrorStateCycle 检查NOT_RESPONDING的flag