1、未调用DetachCurrentThread导致线程无法正常退出
JNIEnv是一个指向全部JNI方法的指针。该指针只在创建它的线程有效，不能跨线程传递。

Java层调用native方法则会创建一个栈桢储存虚拟机相关信息。包括JNIEnv指针，即在native函数的入参处可获得。
native层pthread_create等方式创建线程，则需要调用了AttachCurrentThread连接到虚拟机，才能获取JNIEnv指针。且在线程退出前需要调用DetachCurrentThread取消连接。

每次都要Attach，调用完后又要Detach，非常麻烦。
Google官方JNI文档建议可使用pthread_key，在线程析构时自动调用Detach以简化操作。pthread_key的数量是有限制的，尽量进程内复用pthread_key。
实现：https://blog.csdn.net/Tencent_Bugly/article/details/78898975




2、多线程场景下FindClass调用失败
通过pthread_create中调用FindClass会失败得到空的返回，从而导致调用失败。

如果在Java层调用到native层，会携带栈桢信息，其中包含此应用类的ClassLoader，因此场景下JNI能通过此应用类加载器获取类信息。 而在使用自己创建并Attach到虚拟机的线程，是没有栈桢信息的。此场景下虚拟机会通过系统类加载器寻找应用类信息，但此类加载器并未加载应用类，因此FindClass返回空。

建议通过缓存应用类的ClassLoader解决此问题。另外还需注意检查类名有没有写错(格式类似于java/lang/String)，并且确认相应的类没有被混淆。
下面是参考代码：
// java代码
public class JniAdapter {
    public static ClassLoader getClassLoader() {
        return JniAdapter.class.getClassLoader();
    }
}

//C/C++代码
JavaVM *MSDKJniHelper::java_vm_ = NULL;
jobject MSDKJniHelper::class_loader_obj_ = NULL;
jmethodID MSDKJniHelper::find_class_mid_ = NULL;

void MSDKJniHelper::SetJavaVM(JavaVM *vm)
{
    ......
    java_vm_ = vm;
    JNIEnv *env;
    if (!getenv_(&env))
    {
        return;
    }
    jclass classLoaderClass = env->FindClass("java/lang/ClassLoader");
    jclass adapterClass = env->FindClass("com/tencent/msdk/framework/JniAdapter");
    if (adapterClass)
    {
        jmethodID getClassLoader = env->GetStaticMethodID(adapterClass, "getClassLoader", "()Ljava/lang/ClassLoader;");
        jobject obj = env->CallStaticObjectMethod(adapterClass, getClassLoader);
        class_loader_obj_ = env->NewGlobalRef(obj);
        find_class_mid_ = env->GetMethodID(classLoaderClass, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
        env->DeleteLocalRef(classLoaderClass);
        env->DeleteLocalRef(adapterClass);
        env->DeleteLocalRef(obj);
    }
}

jclass MSDKJniHelper::GetClass(const char *className)
{
    CheckAndClearException();

    JNIEnv *p_env = 0;
    jclass ret = 0;
    do
    {
        if (!p_env)
        {
            if (!getenv_(&p_env))
            {
                break;
            }
        }
        jstring j_class_name = p_env->NewStringUTF(className);
        ret = (jclass)p_env->CallObjectMethod(
            MSDKJniHelper::class_loader_obj_, MSDKJniHelper::find_class_mid_, j_class_name);
        p_env->DeleteLocalRef(j_class_name);
    } while (0);
    if (!ret)
    {
        LOG_ERROR("Failed to find class of %s", className);
    }
    return ret;
}





3、局部引用超限
当我们通过FindClass，NewStringUtf等获取jclass或jobject，如果没有调用DeleteLocalRef删除局部引用，可能会出现内存泄漏或局部引用超限(local reference table overflow)的问题。

局部引用(Local Reference)是native code中对Java对象的映射，相当于持有一个Java对象的引用。局部引用属于JNI的引用类型，即是jobject或其子类。
局部引用限于其创建的堆栈帧和线程，并且在其创建的堆栈帧返回时会自动删除。
也就是说一般情况下局部引用会在返回Java方法时自己删除。
但调用过程中如果存在循环、递归等调用层次过多的情况，很可能会导致局部引用数量超过局部引用限制导致崩溃。
另一方面如果本地方法没有返回Java层，或本地线程没有断开与JVM的连接，局部引用无法自动释放会导致内存泄漏或局部引用超限的问题。

因此，在局部引用使用完毕后，需要尽快调用DeleteLocalRef手动删除局部引用。
