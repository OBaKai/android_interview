https://www.jianshu.com/p/e3fbcd79b037
https://www.jianshu.com/p/316966e3841a


Schedulers.newThread() -> 新开一个线程

Schedulers.single() -> SingleScheduler
	原理：维护着一个线程，任务只能按照有序的方式执行。

Schedulers.io() -> IoScheduler
	原理：维护着核心线程为1，非核心线程大小不受限制的线程池。

Schedulers.computation() -> ComputationScheduler
	原理：维护着一个PoolWorker数组，数组大小为cpu核心数。每个PoolWorker维护着核心线程为1的线程池。
	例子：timer、interval操作符默认是computation()




计算密集型：需要占用非常多CPU资源
例子：计算文件夹大小、计算圆周率至千位的小数点（大量三角函数和开根号的计算）等。

io密集型：只需要占用少量CPU资源，大部分工作交给DMA完成
例子：网络传输、文件传输等。






为什么io不怎么占用cpu资源？

磁盘IO真实发生的场景：
CPU说：硬盘兄帮我把这部要看的小电影拷贝一份到内存，谢谢亲。
硬盘说：好的！我拷贝完了叫你。
CPU说：么么哒！那我打游戏去啦！
CPU打传奇一刀999一刀999（100纳秒过去了）
硬盘说：小C我拷完了。
CPU说：小电影我来啦！
正因为有派发任务，通讯，等待的过程，并发系统才彰显出它的意义。其中CPU是不会与硬盘直接对话的，他们之间有个中间人叫DMA。

DMA(Direct Memory Access，直接存储器访问)：
DMA类似一个小的CPU，有自己的寄存器(记录主存地址和取到的字的count等)。
CPU可以发起一个DMA请求传入读写操作类型、相关I/O设备地址、内存的起始地址、要操作的字数。
然后DMA就可以获取总线的控制权，将一大块内存和外部I/O读入或写出。等操作完成后，再通知CPU。释放总线控制权。
缺点是:系统总线也是一种资源，DMA操作期间，当处理器需要访问总线时，执行速度会变慢。
但是总得来说, DMA是一种高效传输方式.

CPU计算文件地址 -> 委派DMA读取文件 -> DMA接管总线 -> CPU的A进程阻塞，挂起 -> CPU切换到B进程 -> DMA读完文件后通知CPU（一个中断异常） -> CPU切换回A进程操作文件



CPU总线：数据总线、地址总线、控制总线
数据总线：CPU与存储器、CPU与I/O接口设备之间传送数据（各种指令数据信息）的通道
1. 数据总线上的信息是双向传输。信号通过数据总线往返于CPU与存储器、CPU与I/O接口设备之间。
2. 数据总线的宽度决定了CPU和外界的数据的传送速度。
3. 每条传输线一次只能传输一位二进制数据。（8根数据线一次可传送一个八位二进制数据，即一个字节。）

地址总线：CPU与内存、DMA与外设或其他器件之间传送数据的通道
1. 是CPU或DMA能力的单元，用来沟通这些单元想要访问（读取/写入）计算机内存组件/地方的物理地址，即地址总线是。
2. CPU通过地址总线来指定存储单元。
3. 地址总线决定了CPU所能访问的最大内存空间的大小。（10根地址线所能访问的最大的内存为1024位二进制数据）

控制总线：用来传送控制信号和时序信号
1. 控制信号中，有的是微处理器送往存储器和输入输出设备接口电路的，如读/写信号，片选信号、中断响应信号等。
2. CPU通过控制总线对外部器件进行控制。
3. 控制总线的宽度决定了CPU对外部器件的控制能力。


通常CPU总线是由CPU管理的，但在DMA工作时，CPU总线由DM接管，控制传送的字节数，判断DMA是否结束以及发出DMA结束信号，故DMA控制器的工作流程如下：
a. 当外设有DMA需求并准备就绪时，就向DMA控制器发送DMA请求。
b. DMA控制器接收请求后，向CPU发送总线接管请求。
c. CPU接到总线接管请求后，则会在当前总线周期结束后进行中断处理并返回响应信号，通知DMA控制器其已经放弃了对总线的控制权。
d. DMA控制器获得总线的控制权，并对外设发送应答信号，通知外设可以进行DMA传输。
e. DMA控制器向存储器发送地址信号和向存储器及外设发出读/写控制信号，控制数据按初始化设定的方向传送，实现外设与内存的数据传输。
f. 数据全部传输结束后，DMA控制器向CPU发送结束信号，要求撤销总线请求信号，CPU接收到信号后，收回对总线的控制权。