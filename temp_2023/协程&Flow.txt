
java -> rxjava
kotlin -> flow

livedata：是一个感知生命周期的组件
不支持线程切换（它只能在主线程执行）
不支持背压（它只维护最新的一个值，不会帮我们缓存生产出来的大量数据值）


channel：实际上就是个队列，是一个面向多协程之间数据传输的 BlockQueue，用于协程间通信。
Channel允许我们在不同的协程间传递数据。形象点说就是不同的协程可以往同一个管道里面写入数据或者读取数据。
它是一个和 BlockingQueue 非常相似的概念。
区别在于：BlockingQueue 使用 put 和 take 往队列里面写入和读取数据，这两个方法是阻塞的。
而 Channel 使用 send 和 receive 两个方法往管道里面写入和读取数据。这两个方法是非阻塞的挂起函数，所以只能在协程中使用。


flow：生产者
collect：消费者

冷流(flow)：有了消费者，生产者才会进行数据生产
热流(channel)：不管有没有消费者，生产者都会进行数据生产





冷流api：Flow
热流api：Channel
  StateFlow：功能类似LiveData（数据变化就发射），不过它可以在多个协程中使用
  SharedFlow：可以配置对历史发射的数据进行订阅，适合用来处理对于事件的监听




切线程：
launch(Dispatchers.Main) {
  flow {
    emit(2) //执行在IO线程池
  }
  .flowOn(Dispatchers.IO)
  .map {
    it + 1 // 执行在Default线程池
  }
  .flowOn(Dispatchers.Default)
  .collect {
    //执行在主线程
  }
}

flowOn类似RxJava的subscribeOn，Flow中没有对应observeOn。因为collect是一个suspend函数，必须在CoroutineScope中执行，所以响应线程是由CoroutineContext决定的。










协程作用域：
1、runBlocking：顶层函数。会阻塞当前线程来等待，不适合用于业务开发比较适合写测试用例
2、GlobalScope：全局作用域api。生命周期是生命周期是进程级别的，可以一直运行到app停止。
    子协程运行在自己的调度器上不会继承上下文与父协程没有联系，因此所有开启的协程都需要分别手动来管理
3、CoroutineScope：上下文作用域api。intermal修饰未对外暴露，根据指定的上下文创建协程作用域。
    子类：
    MainScope：通常在Activity中使用。在onDestory要记得手动销毁掉。
    ViewModelScope：只能在ViewModel中使用。绑定viewModel的生命周期
    LifecycleScope：只能在Activity、Fragment中使用。并且会和Activity、Fragment生命周期进行绑定。

协程api：
launch：创建协程。返回Job（可通过Job对协程进行一些操作）
async：创建带返回值的协程。返回Deferred（继承自Job，Deferred#await()可等待数据返回）
withContext：不创建新的协程，指定协程上运行代码块。（主要用于切换到到指定的线程，并在闭包内的执行结束后自动切回去继续执行）

========================================================================================

协程是什么 ！！！


协程是什么？安卓平台上协程是Kotlin对线程封装的一套api（一个线程框架）
协程好在哪？好在方便。
最方便在哪？它能够在同一个代码块里边进行多次的线程切换

特点：‘非阻塞式挂起’ 就是用看起来同步的方式写出异步代码
这个特点消除了并发任务之间协作的难度，让我们可以轻松的写出复杂的并发代码。

‘挂起’的本质是什么？挂起协程。
换句话说，就是让这个协程从正在执行它的线程上脱离。

例如：
suspend fun doSomething() : String{
    return withContext(Dispatchers.IO){
        ... 
    }
}

//主线程逻辑：
coroutineScope.launch(Dispatchers.Main) {
   val result = doSomething() 
   tv.setText(result)
}
xxx()
...


分析：
主线程方面：
① launch(Dispatchers.Main) 在主线程开启一个协程
② 执行到 doSomething() 发现是 suspend 函数，挂起协程
③ 跳出闭包，继续执行下面的 xxx() ...

协程方面：
① 执行 doSomething() 函数
② withContext(Dispatchers.IO) 根据调度器指示，启动一个io线程执行闭包里边的耗时逻辑，执行耗时逻辑完成后返回
③ doSomething() 返回后，自动帮我们切回来（最爽的！！！ io -> main）
④ 执行 tv.setText(result) 这个ui操作


========================================================================================

挂起 与 suspend关键字 ！！！

suspend关键字：suspend有暂停的意思。我们在协程中应该理解为：当线程执行到协程的 suspend 函数的时候，暂时不继续执行协程代码了。
然后兵分两路，一方面是线程（不执行协程的代码了，继续往下执行），另一方面是协程（根据调度器指示启动对应的线程执行协程代码）

suspend的使用：关键字只能声明在函数上，并且suspend函数只能在协程里或者另一个suspend函数里被调用。
自己写一个挂起函数，仅仅只加上 suspend 关键字是不行的，还需要函数内部直接或间接地调用到 Kotlin 协程框架自带的 suspend 函数才行。

为什么suspend关键字并没有实际去操作挂起，但Kotlin却把它提供出来？ suspend起到一个提醒的作用。
函数的创建者对函数的使用者的提醒：我是一个耗时函数，我被我的创建者用挂起的方式放在后台运行，所以请在协程里调用我。

因为它本来就不是用来操作挂起的。挂起的操作 —— 也就是切线程，依赖的是挂起函数里面的实际代码，而不是这个关键字。

========================================================================================

‘非阻塞式挂起’ 到底是什么 ！！！

正常的代码：
val result = doSomething() //如果doSomething是耗时的函数，那么这里会卡当前线程
tv.setText(result) //等待上一行代码的执行
xxx() //等待上一行代码的执行

使用了协程后：‘非阻塞式挂起’
coroutineScope.launch(Dispatchers.Main) {
   val result = doSomething() //这里先切走，丢到一个现场里边处理，处理完后切回来
   tv.setText(result) //等待上一行代码的执行
} //发现doSomething是suspend函数，那么我直接跳出来了，继续往下执行，不卡当前线程
xxx()


‘非阻塞式挂起’ 只是个写法。
使用协程能够实现上下两行连续代码悄悄地把线程切走再切回来，不会卡当前线程。
不用协程的话，上下两行连续代码只能是单线程的，那就会卡当前线程。
