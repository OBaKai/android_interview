IO

当用户进程调用wirte()系统调用发起写请求时，同样也是先向page cache中写入修改的内容，然后将修改过的page cache标记为dirty。标注为dirty的page cache会加入到一个dirty list中。内核会周期性地将dirty list中的page cache写回到磁盘中，完成文件内容的落盘。如果在dirty的page cache写回磁盘之前机器发生断电关机，这部分未写回磁盘的数据将会丢失。

页缓存（page cache）：文件读写并不是每次都进行磁盘IO，而是将对应的磁盘文件缓存到内存上，之后对该文件的操作实际上也是对内存的读写。而这个缓存就是页缓存。

脏页（dirty page）：被修改过但还没写入磁盘的页缓存称为脏页。

read过程：读取文件时，操作系统会先从缓存中查找对应文件。
	如果有对应缓存 -> 直接读取缓存内容。
	如果没有对应缓存 -> 产生缺页中断，将文件读取到缓存中，同时read过程也会被阻塞。

write过程：写入数据时，会先将数据写入缓存。
	如果有对应缓存 -> 直接写入缓存，标记为脏页。
	如果没有对应缓存 -> 产生缺页中断，将磁盘文件读取到缓存，再修改缓存内容，标记为脏页。

磁盘回写：
定时回写：由pdflush进程定时将脏页写入磁盘（周期为/proc/sys/vm/dirty_writeback_centisecs，单位是(1/100)厘秒）
fsync()回写：这时候系统会唤醒pdflush进程进行回写，直到所有的脏页都写到磁盘为止。
内存不足或脏页过多，write系统调用会同样会唤醒pdflush进程进行回写。

所以传统的读写：
读：file（内核空间）-> page cache（内核空间）-> user buffer（用户空间）---> 访问
写：修改 ---> user buffer（用户空间）-> page cache（内核空间）-> file（内核空间）
每个 -> 都是一次拷贝，所以在没有页缓存的情况下读、写都需要两次拷贝

mmap
如果可以直接在用户空间读写页缓存，那么就可以免去将页缓存的数据复制到用户空间缓冲区的过程。变成
读：file（内核空间）-> page cache（内核空间）---> 访问
写：修改 ---> page cache（内核空间）-> file（内核空间）

mmap：虚拟内存地址 --映射--> page cache -> file


内核并不会主动把mmap映射的页缓存同步到磁盘，而是需要用户主动触发。同步mmap映射的内存到磁盘有4个时机：
调用 msync 函数主动进行数据同步（主动）。
调用 munmap 函数对文件进行解除映射关系时（主动）。
进程退出时（被动）。
系统关机时（被动）。




系统调用：用户空间跟内核空间之后增加了一个中间层，系统调用层。为用户程序提供硬件抽象接口。
作用：
简化程序开发（无需关心实现，api能用就行）
提供系统稳定与安全（访问内核必须经过系统调用，可进行权限访问、规则限定等处理）
移植性（可移植到不同硬件系统）

系统调用api库：libc
系统调用表：定义在arch/arm/include/uapi/asm/unistd.h
	系统调用号一旦分配之后就不会有任何变更，例如open被赋予为5，因此所有的ARM32系统中，open系统调用号是不能被更改的。




内存管理
分段：程序所需的内存空间的虚拟地址映射到某个物理地址空间中。
分页：把分配单位继续细分成固定大小的页（分段机制的粒度太大，以整个进程地址空间为单位的分配方式导致内存利用率不高。）
	操作系统里默认页面大小是4KB。
内存对象：把一个或者多个内存页面分配出来，作为一个内存对象的容器，在这个容器中容纳相同的内存对象，即同等大小的内存块。

MMU：内存管理单元。负责虚拟页面映射到物理页面。


虚拟内存：每个进程系统都会为其分配一个虚拟内存空间，以32位操作系统为例，虚拟空间为2^32个字节也就是4GB

虚拟内存的划分：0-3GB用户模式使用，3GB-4GB内核模式使用。（Linux内核使用两级的保护机制，即内核模式和用户模式。）
0-3GB的用户空间是进程独立的，而3-4GB的内核空间是所有进程共享的（通过系统调用才能进入内核空间）。

虚拟内存的管理：
进程地址空间：进程可寻址的虚拟地址空间。但是进程没有权限去寻址内核空间的虚拟地址，只能通过系统调用的方式间接访问。

进程内存区域：进程可以通过内存管理机制动态地添加和删除的内存区域。

内存区域划分：
代码段映射：可执行文件中包含只读并可执行的程序头，如代码段和init段等。
数据段映射：可执行文件中包含可读可写的程序头，如数据段和bss段等。
用户进程的栈区域：通常是在用户空间的最高地址，从上往下延伸。它包含栈帧，里面包含了局部变量和函数调用参数等。注意不要和内核栈混淆，进程的内核栈独立存在并有内核维护，主要用于上下文切换。
mmap映射区域：位于用户进程栈下面，主要用于mmap系统调用，比如映射一个文件的内容到进程地址空间等。
堆映射区域：malloc分配的进程虚拟地址就是这段区域。
进程地址空间里的每个内存区域相互不能重叠。两个进程都使用malloc函数来分配内存，分配的虚拟内存的地址是一样的，那是不是说明这两个内存区域重叠了呢？


malloc函数：内存分配（小于128k使用brk方式实现，大于128k使用mmap方式实现。释放用free函数）
mmap函数：建立文件映射或匿名映射（释放用munmap函数）
私有映射：匿名私有：用于内存分配；      文件私有：用于加载动态库。
共享映射：匿名共享：用于进程间共享内存； 文件共享：用于内存映射IO，进程间通讯。






进程
进程控制块（PCB）：描述进程运行状况以及控制进程运行所需要的全部信息，是操作系统用来感知进程存在的一个非常重要的数据结构（task_struct的结构体）。
结构体包含：
	进程的属性：PID、进程状态等
	进程间的关系：PGID（进程组，有关联的进程组成）、SID（会话，有关联的进程组组成）
	进程调度相关信息：
		程序计数器：记录当前进程运行到哪条指令了
		CPU寄存器：主要是为了保存当前运行的上下文，记录了CPU所有必须保存下来的寄存器信息，以便当前进程调度出去之后还能调度回来并接着运行
		CPU调度信息：包括进程优先级、调度队列和调度等相关信息。
	内存管理信息：进程使用的内存信息，比如进程的页表等
	文件管理信息：包括进程打开的文件等
	统计信息：包含进程运行时间等相关的统计信息
	等

进程的生命周期：
创建态：创建了新进程
就绪态：进程获得了可以运作的所有资源和准备条件
执行态：进程正在CPU中执行
阻塞态：进程因为等待某项资源而被暂时踢出了CPU
终止态：进程消亡

fork后进程内存关系：
fork之后子进程完全拷贝了父进程的地址空间，包括栈、堆、代码段等。实际上子进程执行父进程一模一样的逻辑是很少见的，大概率子进程会用不上，最后抛弃掉。
为了解决这个问题，引入了写时拷贝，来提高fork进程的效率。
copy-on-write机制（写时拷贝）：子进程的页表项指向与父进程相同的物理内存页，这样只拷贝父进程的页表项就可以了。当然要把这些页面标记成只读，如果父子进程都不修改内存的内容，大家便相安无事，共用一份物理内存页。但是一旦父子进程中有任何一方尝试修改，就会引发缺页异常。此时，内核会尝试为该页面创建一个新的物理页面，并将内容真正地复制到新的物理页面中，让父子进程真正地各自拥有自己的物理内存页，然后将页表中相应的表项标记为可写。

fork后进程文件关系：
fork之后子进程会完全拷贝父进程所有打开的fd，也就是说子进程也能操作这些fd。如果两个进程都去操作同个fd，不管是读还是写都会有问题。所以引入了close-on-exec机制。
close-on-exec机制：open时带上O_CLOSEXEC标志位，这个fd在fork子进程后执行exec时，父进程就会关闭这个fd。


进程上下文切换：
上文：已执行过的进程指令和数据在相关寄存器与堆栈中的内容
正文：把正在执行的指令和数据在寄存器与堆栈中的内容
下文：把待执行的指令和数据在寄存器与堆栈中的内容

上下文切换两大步骤
地址空间切换：保证进程回到用户空间之后能够访问到自己的指令和数据
进程地址空间指的是进程所拥有的虚拟地址空间，而这个地址空间是假的，是linux内核通过数据结构来抽象出来的。
cpu访问的指令和数据最终会落实到实际的物理地址，进程地址空间内有进程运行的指令和数据，因此到调度器从其他进程重新切换到我的时候，为了保证当前进程访问的虚拟地址是自己的必须进行切换地址空间。

处理器状态切换（硬件上下文切换）：保证进程内核栈和执行流的切换
地址空间切换是完成用户空间的切换，但是上下文切换是发生在内核态的，只切换了用户空间，但内核态依旧是在上一个进程，所以就需要到处理器状态切换。



多线程与fork产生的问题
fork后，主进程的全局变量的状态以及所有的pthreads对象（如互斥量、条件变量等）都会在子进程中得以保留。
这样会产生两个问题：

1、可能会导致死锁
一个线程在fork()前锁定了某个互斥量，且对某个全局变量的更新也做到了一半，此时fork()后，所有数据及状态被拷贝到子进程中，那么子进程中对该互斥量就无法解锁（因为其并非该互斥量的属主），如果再试图锁定该互斥量就会导致死锁。

2、内存泄露
未执行清理函数和针对线程局部存储数据的析构函数，多线程情况下可能会导致子进程的内存泄露。
另外，子进程中的线程可能无法访问（父进程中）由其他线程所创建的线程局部存储变量，因为（子进程）没有任何相应的引用指针。

解决方法：pthread_atfork()函数，可传入三个函数指针
int pthread_atfork(void(*prepare)(void),void(*parent)(void),void(*child)(void));
parepare函数：在fork之前会被调用的
parent函数：在fork后，返回父进程之前调用
child函数：在fork后，返回子进程之前调用
如果parpare中加锁所有的互斥量，在parent函数和chiled函数中解锁所有的互斥量，那么在fork返回之后，互斥量的状态就是未加锁。
使用参考：https://zhuanlan.zhihu.com/p/469010694







线程：
操作系统进程调度器可以调度的最小执行单元（线程被称为轻量级进程（Light Weighted Process），创建线程的花费约是创建进程的五分之一）

线程上下文切换：同一个进程里不同线程之间发生的上下文切换。由于线程原本属于同一个进程，它们会共享地址空间，大量资源共享，切换的代价小于进程之间的切换。








中断机制
由来：操作系统管理着众多外设，处理器跟这些外设的处理速度不是一个量级的。假设处理器需要获取一个键盘的事件，如果处理器发出请求信号之后一直在轮询键盘的响应，由于键盘响应速度比处理器慢得多并且等待用户输入，那么处理器是很浪费资源的。与其这样不如键盘有事件发生时发送一个信号给处理器，让处理器暂停当前的工作来处理这个响应，这比处理器一直在轮询效率要高。
(轮询机制也不完全比中断机制差。例如网络吞吐量大的场景下，网卡驱动采用轮询机制比中断机制效率要高)

中断：是一种异步的事件处理机制，可以提高系统的并发处理能力。

如何解决中断处理程序执行过长和中断丢失的问题？
上下半部机制。
上半部（硬中断）：主要处理跟硬件紧密相关的或时间敏感的工作，特点是快速执行。
下半部（软中断）：用来延迟处理上半部未完成的工作，通常以内核线程的方式运行。特点是延迟执行。

proc文件系统：是一种内核空间和用户空间进行通信的机制，可以用来查看内核的数据结构，或者用来动态修改内核的配置。
/proc/softirqs 提供了软中断的运行情况；
/proc/interrupts 提供了硬中断的运行情况。

硬中断：由硬件产生。比如磁盘，网卡，键盘，时钟等。每个设备或设备集都有它自己的IRQ（中断请求）。基于IRQ，CPU可以将相应的请求分发到对应的硬件驱动上。硬中断可以直接中断CPU，引起内核中相关的代码被触发。

软中断：软中断仅与内核相关，由当前正在运行的进程所产生。 通常软中断是一些对I/O的请求，这些请求会调用内核中可以调度I/O发生的程序。 软中断并不会直接中断CPU，也只有当前正在运行的代码（或进程）才会产生软中断。
这种中断是一种需要内核为正在运行的进程去做一些事情（通常为I/O）的请求。 除了iowait(等待I/O的CPU使用率)升高，软中断(softirq)CPU使用率升高也是最常见的一种性能问题。
软中断的实现：tasklet、工作队列


信号机制
进程间通信的最古老的方式。它是在软件层次上对中断机制的一种模拟，是一种异步通信的方式 。信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断，转而处理某一个突发事件。

注册信号：通过系统调用signal()、sigaction()。
signal()：在可靠信号系统调用的基础上实现, 它只有两个参数，不支持信号传递信息，主要是用于前32种非实时信号的安装；

sigaction()：是较新的函数（由两个系统调用实 现：sys_signal以及sys_rt_sigaction），有三个参数，支持信号传递信息，主要用来与 sigqueue() 系统调用配合使用，当然，sigaction()同样支持非实时信号的安装。
sigaction()优于signal()主要体现在支持信号带有参数。关于这方面的内容，如果想获取更多，也可参考这里。






DMA：一种高速的数据传输操作，允许在外部设备和存储器之间直接读写数据
DMA控制器：
