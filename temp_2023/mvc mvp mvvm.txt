
MVVM和MVP的思想是相同的，最本质的概念就是Activity里做的事情太多了，所以要把Activity中与UI无关的部分抽离出来，交给别人做。

====================================================================================================

mvp
V <-> P
P <-> M

Model层：负责提供数据
View层：Activity
Presenter层：纽带层，用来连接M层与V层

优点：
1、V、M层的完全分离，更低的耦合性。
2、P层复用（连带着M层也可以复用了）。V层的变化总是比M变化频繁，所以我们有写场景可以复用P层，一个P用在多个V上。
3、职责分明，可更好地协同工作（还没出ui图之前，可先写P、M层的逻辑）

缺点：
1、P、V交互密切，随着交互地不断增加，V层需要定义大量的接口，以及需要实现大量接口。
2、V层接口的改动都需要改动到其对应的P层。

====================================================================================================

mvvm
M <-> VM
VM <- V

Model层：负责提供数据
View层：Activity
ViewModel层：主要负责业务逻辑的处理。但VM层不涉及任何的视图操作。
	DataBinding库：V层和VM层中的数据可以实现绑定，VM层中数据变化会自动通知V层进行更新，因此ViewModel层不需要持有View层的引用。

优点：
MVVM与MVP对比：
1、进一步降低了耦合：VM层不会持有V层的引用，V层代码的改变不会影响到VM层。
2、不用想MVP那样需要编写大量的接口代码

缺点：
1、LiveData的膨胀：为保证对外暴露的LiveData是不可变的，需要添加不少模板代码并且容易遗忘
   例如：
   class TestViewModel : ViewModel() {
	    //为保证对外暴露的LiveData不可变，增加一个状态就要添加两个LiveData变量
	    private val _pageState: MutableLiveData<PageState> = MutableLiveData()
	    val pageState: LiveData<PageState> = _pageState
	    ...
	}

2、多数据流：V层与VM层的交互分散，缺少唯一修改源，不易于追踪

工具介绍：
DataBinding、ViewModel 和 LiveData 等组件是 Google 为了帮助我们实现 MVVM 模式提供的架构组件，它们并不是 MVVM 的本质，只是实现上的工具。
Lifecycle：生命周期状态回调；
LiveData：可观察的数据存储类；
databinding：可以自动同步 UI 和 data，不用再 findviewById()；
ViewModel： 存储界面相关的数据，这些数据不会在手机旋转等配置改变时丢失。

====================================================================================================

mvi：mvvm进阶版

MVI模式的改动在于将View和ViewModel之间的多数据流改为基于ViewState的单数据流。

View和ViewModel之间的多个交互（多 LiveData 数据流）变成了单数据流。
无论View有多少个视图状态，只需要订阅一个ViewState便可以获取所有状态，再根据ViewState去响应。

====================================================================================================

mvc
V -> C
C -> M
M -> V

Model层：负责提供数据
View层：Activity
Controller层：基本上也由Activity来负责

优点：
1、一定程度上降低了代码间的耦合性。
缺点：
1、随着交互地不断增加Activity类会变得臃肿。
2、Activity就需要横跨V、C层，V、C层联系紧密，妨碍了各自的复用。
