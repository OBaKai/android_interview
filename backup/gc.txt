GC如何判断对象的存活？
可达性分析算法：通过GC Roots的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可达到，GC会回收它。

------------------------------------------------------------------

什么对象可以作为GC Roots？
1、虚拟机栈（栈帧中的本地变量表）中引用的对象。
2、方法区中类静态属性引用的对象。
3、方法区中常量引用的对象。
4、本地方法栈中JNI（即一般说的Native方法）引用的对象。

可达例子1：
static Obj a = new Obj(); //静态对象，是GC Roots
main(){
	Obj b = a;
	Obj c = b;
	Obj d = c;
	Obj e = a;
}

a -> b -> c -> d
  -> e
(b、c、d、e是可达的，方法执行完后，GC也不会回收它们)

可达例子2：
main(){
	Obj a = new Obj(); //GC Roots
	Obj b = a;
	Obj c = b;
}
(方法执行完之前，a、b、c都是可达的)

不可达例子：
Obj a = new Obj(); //不是GC Roots
main(){
	Obj b = a;
	Obj c = b;
}

a -> b -> c
(b、c是不可达的，方法执行完后，GC会回收它们)

==================================================================
GC如果进行回收的？

复制回收算法：
将可用内存按容量划分为大小相等的两块区域，每次只使用其中的一块，当这一块的内存快用完了就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况。

优点：实现简单，运行高效，不会出现内存碎片。
缺点：内存缩小了一半利用率低，需要内存复制。
使用场景：新生代区使用。

------------------------------------------------------------------

标记-清除算法：
分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。
它的主要不足空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。

优点：内存利用率百分百，无需内存复制。
缺点：会出现内存碎片。

------------------------------------------------------------------

标记-整理算法：
先标记出所有需要回收的对象，在标记完成后，后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。

优点：内存利用率百分百，不会出现内存碎片。
缺点：需要内存复制。

------------------------------------------------------------------
垃圾收集器：

收集器 收集对象和算法 	收集器类型 	说明 	适用场景 
Serial 	新生代，复制算法 	单线程 		简单高效；
适合内存不大的情况； 
ParNew 	新生代，复制算法 	并行的多线程收集器 	ParNew垃圾收集器是Serial收集器的多线程版本 	搭配CMS垃圾回收器的首选 
Parallel Scavenge
吞吐量优先收集器 	新生代，复制算法 	并行的多线程收集器 	类似ParNew，更加关注吞吐量，达到一个可控制的吞吐量； 	本身是Server级别多CPU机器上的默认GC方式，主要适合后台运算不需要太多交互的任务； 

收集器 	收集对象和算法 	收集器类型 	说明 	适用场景 
Serial Old 	老年代，标记整理算法 	单线程 		Client模式下虚拟机使用 
Parallel Old 	老年代，标记整理算法 	并行的多线程收集器 	Parallel Scavenge收集器的老年代版本，为了配合Parallel Scavenge的面向吞吐量的特性而开发的对应组合；	在注重吞吐量以及CPU资源敏感的场合采用 
CMS 	老年代，标记清除算法 	并行与并发收集器 	尽可能的缩短垃圾收集时用户线程停止时间；缺点在于： 
1.内存碎片 
2.需要更多cpu资源 
3.浮动垃圾问题，需要更大的堆空间 	重视服务的响应速度、系统停顿时间和用户体验的互联网网站或者B/S系统。互联网后端目前cms是主流的垃圾回收器； 
G1 	跨新生代和老年代；标记整理 + 化整为零 	并行与并发收集器 	JDK1.7才正式引入，采用分区回收的思维，基本不牺牲吞吐量的前提下完成低停顿的内存回收；可预测的停顿是其最大的优势； 	面向服务端应用的垃圾回收器，目标为取代CMS 

并行：垃圾收集的多线程的同时进行。
并发：垃圾收集的多线程和应用的多线程同时进行。

注：吞吐量=运行用户代码时间/(运行用户代码时间+ 垃圾收集时间)
垃圾收集时间= 垃圾回收频率 * 单次垃圾回收时间

==================================================================


==================================================================

新生代中3个区（Eden区 + 两个S区）为什么内存比例是8:1:1 ？
1、在新生代区中绝大部分对象的生命都是很短暂的，也就是说并不需要按照1:1的比例来划分内存空间；
2、经长期研究测算出当内存使用超过98%以上时内存就应被minor gc回收一次。但是实际应用中如果真到98%才GC可能就来不及了，所以保险起见当内存使用到达90%的时候就gc，留10%的内存放存活的对象。
3、这预留下来的这10%的空间称为S区（有两个s区 s1 和 s0），S区是用来存储新生代GC后存活下来的对象，而GC算法使用的是复制回收算法。需要1:1的内存空间。也就是需要占用总内存的20%，留下了80%给Eden区。
4、每次GC范围是Eden区+一个S区。（比例是，eden:s1:s0=8:1:1=8:1:1）这里的eden区（80%）和其中的一个S区（10%） 合起来共占据90%，GC就是清理的他们，始终保持着其中一个S区是空留的，保证GC的时候复制存活的对象有个存储的地方。

8:1:1的优点：提高内存的利用率，只浪费了10%的内存。

如果存活的对象超过10%的内存怎么办？
空间担保：空间担保是老年代区，如果S区放不下了，会把多出来的部分放到老年代区。

==================================================================

堆内存的划分：（新生代:老年代 = 1:2）
新生代（PSYoungGen）
	Eden区:两个S区 = Eden:From:To = 8:1:1
老年代（ParOldGen）

堆内存分配策略：
1、对象优先在Eden分配，如果说Eden内存空间不足，就会发生Minor GC
2、大对象直接进入老年代。大对象：需要大量连续内存空间的对象，比如很长的字符串或大型数组。
3、长期存活的对象将进入老年代。默认15岁，-XX:MaxTenuringThreshold调整
	对象头会记录对象的年龄，当对象在S区中被复制一次，年龄就会+1岁。当达到最大年龄晋升到老年区。
4、动态对象年龄判定。
	虚拟机并不是永远地要求对象的年龄必须达到最大年龄才能晋升老年代，如果在S区中相同年龄所有对象大小的总和大于S区的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。 
5、空间分配担保。
	新生代中有大量的对象存活S区不够用了，当出现大量对象在MinorGC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把S区无法容纳的对象直接进入老年代。

GC策略：
新生代区内存不够，会触发Minor GC。
老年代区内存不够，会触发Full GC。

==================================================================

四种引用：
强引用

软引用（SoftReference）：系统将要发生OOM之前，这些对象就会被回收。
用途：例如为了让图片列表更快地显示，可以把它们直接加载到内存中，软引用它们。当系统内存不够即将OOM的时候，让系统释放掉这些图片的内存，保证程序的正常运行。大不了图片看不了而已，不至于闪退。

弱引用（WeakReference）：只能生存到下一次垃圾回收之前，GC发生时不管内存够不够都会被回收。
注意：软引用和弱引用，可以用在内存资源紧张的情况下以及创建不是很重要的数据缓存。当系统内存不足的时候，缓存中的内容是可以被释放的。
实际运用（WeakHashMap、ThreadLocal）

虚引用：幽灵引用，最弱，被垃圾回收的时候收到一个通知

==================================================================




